In JavaScript, the slice() method is used to extract a portion of an array or a string without modifying the original array or string. The slice() method takes two parameters: the starting index and the ending index (exclusive). It will slice till before the last index. If no ending index is provided, the slice will go up to the end of the array or string.
In JavaScript, the concat() method is used to concatenate arrays or strings. It does not change the existing arrays or strings; instead, it returns a new array or string containing the elements of the original arrays or strings.
In JavaScript, the join() method is used to join the elements of an array into a string. It takes an optional parameter called the "separator," which is a string used to separate each element in the resulting string. If no separator is provided, a comma is used as the default separator.
.includes() method is used to check whether the given string includes the given sub-string.
In synchronous code all the steps are completed in an order and the other steps wait for the steps above them for being completed.
In asynchronous code the given code is completed after the given time and doesn't wait for the previous code to be completed.
new Array(n) is use to create an empty array with n number of items
A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.
A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.
finction compostions is way in js using which we can add multiple functions in one function which takes a sing argument. example to understand:- 
const double = x => x * 2;        // A function that doubles a number
const addOne = x => x + 1;        // A function that adds one to a number

const composedFunction = compose(double, addOne); // Composes the two functions

console.log(composedFunction(5)); // Output: 11
compose = (fn1, fn2) => value => fn2(fn1(value))            
in this above example double and addOne function is composed in a single function compose. Compose takes two function as argumennts, takes one parameter value and sends it to fn1 first and the result of fn1 to fn2.  
Promise.all() is a method in JavaScript that takes an array (or any iterable) of promises and returns a single Promise that resolves when all of the promises in the iterable have resolved, or rejects as soon as any one of the promises rejects.
Ex - const promise1 = Promise.resolve(3);
const promise2 = 42; // this will be treated as a resolved promise
const promise3 = new Promise((resolve) => setTimeout(resolve, 100, 'foo'));

Promise.all([promise1, promise2, promise3])
  .then((values) => console.log(values))
  .catch((error) => console.error(error));
Method chaining is a programming pattern in which multiple methods are called on the same object in a single line of code. Each method returns the object itself (or a modified version of it), enabling the next method in the chain to execute on that same object.
Ex - class Calculator {
  constructor(value = 0) {
    this.value = value;
  }
  
  add(num) {
    this.value += num;
    return this;  // Returns the instance to allow chaining
  }

  subtract(num) {
    this.value -= num;
    return this;
  }

  multiply(num) {
    this.value *= num;
    return this;
  }

  divide(num) {
    if (num !== 0) {
      this.value /= num;
    }
    return this;
  }

  result() {
    return this.value;
  }
}

// Using method chaining
const calc = new Calculator();
const finalResult = calc.add(5).subtract(2).multiply(3).divide(2).result();

console.log(finalResult);  // Output: 4.5

The optional chaining (?.) operator accesses an object's property or calls a function. If the object accessed or function called using this operator is undefined or null, the expression short circuits and evaluates to undefined instead of throwing an error.

const adventurer = {
  name: "Alice",
  cat: {
    name: "Dinah",
  },
};

const dogName = adventurer.dog?.name;
console.log(dogName);
// Expected output: undefined

console.log(adventurer.someNonExistentMethod?.());
// Expected output: undefined

The nullish coalescing (??) operator is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.

const foo = null ?? "default string";
console.log(foo);
// Expected output: "default string"

const baz = 0 ?? 42;
console.log(baz);
// Expected output: 0
